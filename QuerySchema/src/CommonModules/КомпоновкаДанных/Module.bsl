//  Функция создает обьъект запрос с заполненными параметрами из настроек СКД
Функция СформироватьЗапросПоУсловиямСКД(СхемаКомпоновкиДанных, ИмяВарианта = "", СКДОтбор = Неопределено, Параметры = Неопределено) Экспорт
	КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы				= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	Если ПустаяСтрока(ИмяВарианта) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВарианта].Настройки);
	КонецЕсли;
	Если СКДОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, СКДОтбор);
	КонецЕсли;
	Если Параметры <> Неопределено Тогда
		Для Каждого ЭлементПараметров Из Параметры Цикл
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЭлементПараметров.Ключ, ЭлементПараметров.Значение);
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикМакета		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки);
	
	ТекстЗапроса			= МакетКомпоновкиДанных.НаборыДанных[0].Запрос;
	Запрос					= Новый Запрос(ТекстЗапроса);
	Для Каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла;
	
	Возврат Запрос;
КонецФункции

Процедура СкопироватьЭлементыНастройкиСКД(ПриемникЗначения, ИсточникЗначения, ОчищатьПриемник = Истина) Экспорт
    
    Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
        ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
        ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
        ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
        СоздаватьПоТипу = Ложь;
    Иначе
        СоздаватьПоТипу = Истина;
    КонецЕсли;
    
    ПриемникЭлементов = ПриемникЗначения.Элементы;
    Если ОчищатьПриемник Тогда
        ПриемникЭлементов.Очистить();
    КонецЕсли;
    ИсточникЭлементов = ИсточникЗначения.Элементы;
    
    Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
        
        Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
            Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);                            // Элементы порядка добавляем в начало
            ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
        Иначе
            Если СоздаватьПоТипу Тогда
                ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
            Иначе
                ЭлементПриемник = ПриемникЭлементов.Добавить();
            КонецЕсли;
        КонецЕсли;
        
        ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
        
        // В некоторых коллекциях необходимо заполнить другие коллекции

        Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастройкиСКД(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
            СкопироватьЭлементыНастройкиСКД(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
            ЗаполнитьЭлементыНастройкиСКД(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
        ИначеЕсли ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастройкиСКД(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
        КонецЕсли;
        
        // В некоторых элементах коллекции необходимо заполнить другие коллекции

        Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастройкиСКД(ЭлементПриемник, ЭлементИсточник);
        ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастройкиСКД(ЭлементПриемник, ЭлементИсточник);
        ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
            СкопироватьЭлементыНастройкиСКД(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
        ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
            ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
            ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
            ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
            ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаполнитьЭлементыНастройкиСКД(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
    
    Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
        КоллекцияЗначений = ИсточникЗначения;
    Иначе
        КоллекцияЗначений = ИсточникЗначения.Элементы;
    КонецЕсли;
    
    Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
        Если ПервыйУровень = Неопределено Тогда
            ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
        Иначе
            ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
        КонецЕсли;
        Если ЭлементПриемник = Неопределено Тогда
            Продолжить;
        КонецЕсли;
        ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
        Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
            Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
                ЗаполнитьЭлементыНастройкиСКД(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
            КонецЕсли;
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры запроса из параметров макета компоновки данных. 
// Имя параметра определяется по шаблону П[0-9]{0,}, где номер определяется от текущего, переданного в функцию.
//
// Пример использования:
//	РаботаСоСхемойЗапроса.СконвертироватьПараметрыОтбора(Оператор.Отбор, ОператорСКД.Отбор, 
//		КомпоновкаДанных.ЗаполнитьПараметрыЗапросаИзМакета(Запрос, МакетКомпоновкиДанных, ТекущийИндексПараметра)
//	);
//
// Возвращает: соответствие параметров макета и запроса в формате "&П[0-9]{0,}" -> "&П[0-9]{0,}"
//
// Параметры:
//  <Запрос>  - <Запрос> - 
//  <МакетКомпоновкиДанных>  - <МакетКомпоновкиДанных > - 
//
Функция ЗаполнитьПараметрыЗапросаИзМакета(Запрос, МакетКомпоновкиДанных, ТекущийИндексПараметра = -1) Экспорт
	СоответствиеПараметров	= Новый Соответствие;
	Для Каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		ТекущийИндексПараметра = ТекущийИндексПараметра + 1;
		ИмяПараметра = "П"+Формат(ТекущийИндексПараметра, "ЧГ=");
		СоответствиеПараметров["&"+ЗначениеПараметра.Имя] = "&"+ИмяПараметра;
		Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра.Значение);
	КонецЦикла;
	Возврат СоответствиеПараметров;
КонецФункции // ЗаполнитьПараметрыЗапроса()
